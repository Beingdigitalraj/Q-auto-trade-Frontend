
backend/middleware
touch backend/middleware/security.js
touch backend/middleware/auth.js
touch backend/middleware/rateLimiter.js
server.js
import { apiLimiter } from "./middleware/rateLimiter.js";
import { verifyToken } from "./middleware/auth.js";
import { validateTrade } from "./middleware/security.js";
security.js
export const validateTrade = (tradeData) => {
  if (!tradeData.amount || tradeData.amount <= 0) {
    throw new Error("Invalid trade amount");
  }
  if (!tradeData.price || tradeData.price <= 0) {
    throw new Error("Invalid trade price");
  }
};
auth.js
import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config();

export const verifyToken = (req, res, next) => {
  const token = req.headers.authorization;
  if (!token) return res.status(401).json({ message: "Unauthorized access" });

  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) return res.status(403).json({ message: "Invalid token" });
    req.user = decoded;
    next();
  });
};
rateLimit.js
import rateLimit from "express-rate-limit";

export const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 50, // Limit requests per IP
  message: "Too many requests, please try again later.",
});
backend/server.js
import express from "express";
import dotenv from "dotenv";
import tradeRoutes from "./routes/tradeRoutes.js";
import { apiLimiter } from "./middleware/rateLimiter.js";
import { verifyToken } from "./middleware/auth.js";
import { validateTrade } from "./middleware/security.js";

dotenv.config();
const app = express();

app.use(express.json());
app.use(apiLimiter);
app.use("/api/trades", verifyToken, validateTrade, tradeRoutes);

app.listen(5000, () => console.log("âœ… Server running on port 5000"));
