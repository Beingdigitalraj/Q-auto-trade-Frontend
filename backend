backend/middleware
touch backend/middleware/security.js
touch backend/middleware/auth.js
touch backend/middleware/rateLimiter.js
server.js
import { apiLimiter } from "./middleware/rateLimiter.js";
import { verifyToken } from "./middleware/auth.js";
import { validateTrade } from "./middleware/security.js";
backend/middleware/security.js
export const validateTrade = (tradeData) => {
  if (!tradeData.amount || tradeData.amount <= 0) {
    throw new Error("Invalid trade amount");
  }
  if (!tradeData.price || tradeData.price <= 0) {
    throw new Error("Invalid trade price");
  }
};
backend/middleware/auth.js
import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config();

export const verifyToken = (req, res, next) => {
  const token = req.headers.authorization;
  if (!token) return res.status(401).json({ message: "Unauthorized access" });

  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) return res.status(403).json({ message: "Invalid token" });
    req.user = decoded;
    next();
  });
};
backend/middleware/rateLimiter.js
import rateLimit from "express-rate-limit";

export const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 50, // Limit requests per IP
  message: "Too many requests, please try again later.",
});
backend/server.js
import express from "express";
import dotenv from "dotenv";
import tradeRoutes from "./routes/tradeRoutes.js";
import { apiLimiter } from "./middleware/rateLimiter.js";
import { verifyToken } from "./middleware/auth.js";
import { validateTrade } from "./middleware/security.js";

dotenv.config();
const app = express();

app.use(express.json());
app.use(apiLimiter);
app.use("/api/trades", verifyToken, validateTrade, tradeRoutes);

app.listen(5000, () => console.log("âœ… Server running on port 5000"));
backend/.env
JWT_SECRET=your_jwt_secret_key_here
API_URL=https://api.qautotrade.com
MONGO_URI=mongodb+srv://your-mongo-uri
npm install express jsonwebtoken dotenv express-rate-limit
web3.js
import { ethers } from "ethers";
import { CONFIG } from "./settings";

const provider = new ethers.providers.JsonRpcProvider(CONFIG.RPC_URL);
const signer = new ethers.Wallet(CONFIG.PRIVATE_KEY, provider);

export const getBalance = async (address) => {
    const balance = await provider.getBalance(address);
    return ethers.utils.formatEther(balance);
};
backend/.env
JWT_SECRET=your_jwt_secret_key_here
API_URL=https://api.qautotrade.com
MONGO_URI=mongodb+srv://your-username:your-password@your-cluster.mongodb.net/yourDatabaseName?retryWrites=true&w=majority
NEXT_PUBLIC_PRIVATE_KEY=your_wallet_private_key
web3.js
import { ethers } from "ethers";
import { CONFIG } from "./settings";

const provider = new ethers.providers.JsonRpcProvider(CONFIG.RPC_URL);
const signer = new ethers.Wallet(CONFIG.PRIVATE_KEY, provider);

export const getBalance = async (address) => {
    const balance = await provider.getBalance(address);
    return ethers.utils.formatEther(balance);
};
