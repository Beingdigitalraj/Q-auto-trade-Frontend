.env JWT_SECRET=your_jwt_secret_key_here
API_URL=https://api.qautotrade.com
MONGO_URI=mongodb+srv://your-username:your-password@your-cluster.mongodb.net/yourDatabaseName?retryWrites=true&w=majority
NEXT_PUBLIC_PRIVATE_KEY=your_wallet_private_key
server.js import express from "express";
import dotenv from "dotenv";
import tradeRoutes from "./routes/tradeRoutes.js";
import { apiLimiter } from "./middleware/rateLimiter.js";
import { verifyToken } from "./middleware/auth.js";
import { validateTrade } from "./middleware/security.js";
import connectDB from "./config/db.js";
connectDB(); // Initialize database connection before starting the server
dotenv.config();
const app = express();

app.use(express.json());
app.use(apiLimiter);
app.use("/api/trades", verifyToken, validateTrade, tradeRoutes);

app.listen(5000, () => console.log("✅ Server running on port 5000"));
// Save the file before running the server
// Ensure all configurations are properly set in .env
console.log("✅ Configuration loaded successfully.");
config/
db.js import mongoose from "mongoose";
import dotenv from "dotenv";

dotenv.config();

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log(`✅ MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error(`❌ MongoDB Connection Failed: ${error.message}`);
    process.exit(1); // Exit on failure
  }
};

export default connectDB;

middleware/auth.js import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config();

export const verifyToken = (req, res, next) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Unauthorized access" });

  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) return res.status(403).json({ message: "Invalid token" });
    req.user = decoded;
    next();
  });
};
security.js export const validateTrade = (tradeData) => {
  if (!tradeData.amount || tradeData.amount <= 0) {
    throw new Error("Invalid trade amount");
  }
  if (!tradeData.price || tradeData.price <= 0) {
    throw new Error("Invalid trade price");
  }
};
rateLimiter.js import rateLimit from "express-rate-limit";

export const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 50, // Limit requests per IP
  message: "Too many requests, please try again later.",
});
Routes/tradeRoutes.js import express from "express";
import { validateTrade } from "../middleware/security.js";

const router = express.Router();

router.post("/execute", (req, res) => {
  try {
    validateTrade(req.body);
    res.json({ message: "Trade executed successfully!" });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

export default router;
web3.js import { ethers } from "ethers";
import dotenv from "dotenv";
import { CONFIG } from "../config/settings.js";
const provider = new ethers.providers.JsonRpcProvider(CONFIG.RPC_URL);
dotenv.config();
export const getBalance = async (address) => {
    const balance = await provider.getBalance(address);
    return ethers.utils.formatEther(balance);
};
package.json {
  "name": "web3-trading-platform",
  "version": "1.0.0",
  "description": "Secure and efficient Web3 trading platform backend",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest"
  },
 logger.js import winston from "winston";

const logger = winston.createLogger({
  level: "info",
  format: winston.format.json(),
  transports: [
    new winston.transports.File({ filename: "logs/error.log", level: "error" }),
    new winston.transports.Console(),
  
export default logger;
import logger from "../config/logger.js";
logger.error("Trade execution failed due to invalid data.");
