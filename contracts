// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
Trade.sol
contract Trade is Ownable, ReentrancyGuard {
    mapping(address => uint256) public balances;

    event Deposit(address indexed user, uint256 amount);
    event Withdrawal(address indexed user, uint256 amount);

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) public nonReentrant {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        payable(msg.sender).transfer(amount);
        balances[msg.sender] -= amount;
        emit Withdrawal(msg.sender, amount);
    }
}
struct TradeOrder {
    address trader;
    uint256 amount;
    uint256 price;
    bool executed;
}

mapping(uint256 => TradeOrder) public tradeOrders;

function createTradeOrder(uint256 orderId, uint256 amount, uint256 price) public {
    require(amount > 0, "Trade amount must be positive");
    tradeOrders[orderId] = TradeOrder(msg.sender, amount, price, false);
}

function executeTrade(uint256 orderId) public onlyOwner {
    require(tradeOrders[orderId].executed == false, "Trade already executed");
    tradeOrders[orderId].executed = true;
}
mapping(address => uint256) public lastWithdrawal;

function withdraw(uint256 amount) public {
    require(block.timestamp - lastWithdrawal[msg.sender] > 1 days, "Withdrawals limited to once per day");
    require(balances[msg.sender] >= amount, "Insufficient balance");

    payable(msg.sender).transfer(amount);
    balances[msg.sender] -= amount;
    lastWithdrawal[msg.sender] = block.timestamp;
}
