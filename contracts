// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract Trade is Ownable, ReentrancyGuard {
    mapping(address => uint256) public balances;
    mapping(address => uint256) public lastWithdrawal;
    mapping(address => uint256) public withdrawalLimits;

    struct TradeOrder {
        address trader;
        uint256 amount;
        uint256 price;
        bool executed;
    }

    mapping(uint256 => TradeOrder) public tradeOrders;

    event Deposit(address indexed user, uint256 amount);
    event Withdrawal(address indexed user, uint256 amount);
    event TradeCreated(uint256 orderId, address indexed trader, uint256 amount, uint256 price);
    event TradeExecuted(uint256 orderId, address indexed trader);

    // Deposit funds to the contract
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    // Withdraw funds securely with daily limits
    function withdraw(uint256 amount) public nonReentrant {
        require(block.timestamp - lastWithdrawal[msg.sender] > 1 days, "Withdrawals limited to once per day");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        require(amount <= withdrawalLimits[msg.sender], "Exceeds withdrawal limit");

        payable(msg.sender).transfer(amount);
        balances[msg.sender] -= amount;
        lastWithdrawal[msg.sender] = block.timestamp;
        emit Withdrawal(msg.sender, amount);
    }

    // Set withdrawal limits (Only Owner)
    mapping(address => uint256) public withdrawalLimits;

function setWithdrawalLimit(address user, uint256 newLimit) public onlyOwner {
    require(newLimit > 0, "Withdrawal limit must be positive");
    withdrawalLimits
